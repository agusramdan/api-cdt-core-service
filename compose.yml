# docker plugin install  grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
# docker plugin enable loki

x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

services:

  db:
    image: postgres:16
    hostname: db
    environment:
      - POSTGRES_DB=core
      - POSTGRES_USER=core_user
      - POSTGRES_PASSWORD=core_pwd
    ports:
      - "5432:5432"
    logging: *default-logging

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend
    logging: *default-logging

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend
    healthcheck:
      test: nc -z kafka 9092
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10
    logging: *default-logging

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - backend
    logging: *default-logging

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - backend
    logging: *default-logging

  # Infrastructure
  loki:
    image: grafana/loki:3.0.0
    hostname: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.46.0
    command:
      - --enable-feature=exemplar-storage
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  tempo:
    image: grafana/tempo:2.2.2
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./etc/tempo/tempo.yml:/etc/tempo.yaml:ro
      - ./docker/tempo/tempo-data:/tmp/tempo
    ports:
      - "3110:3100"  # Tempo
      - "9411:9411" # zipkin
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.1.0
    volumes:
      - ./etc/grafana:/etc/grafana/provisioning/datasources:ro
#    environment:
#      - GF_AUTH_ANONYMOUS_ENABLED=true
#      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
#      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3400:3000"
    depends_on:
      - loki
      - prometheus
      - tempo
    logging: *default-logging

  api-cdt-gateway-service:
    image: agusramdan/api-cdt-gateway-service:dev
    container_name: api-cdt-gateway-service
    depends_on:
      - mongodb
#    env_file:
#      - ./docker/dev/gateway.env
    environment:
      - SERVER_PORT=8097
      - SPRING_PROFILES_ACTIVE=dev
    ports:
      - "8097:8097"
    networks:
      - backend

  api-cdt-core-service:
    build: .
    #  context: .
    #image: agusramdan/api-cdt-core-service:dev
    container_name: api-cdt-core-service
    environment:
      - SPRING_PROFILES_ACTIVE=pgofline,zipkin
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    ports:
      - "8082:8080"
    depends_on:
      - db
      - kafka
      - tempo
      - loki

  api-cdt-cdm-service:
    image: agusramdan/api-cdt-cdm-service:dev
#    build:
#      context: .
    container_name: api-cdt-cdm-service
#    labels:
#      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - mongodb
#    env_file:
#      - ./gateway.env
    environment:
      - SPRING_PROFILES_ACTIVE=oauth2,devdocker
    ports:
      - "8091:8080"
    networks:
      - backend
      - core
      - frontend

networks:
  frontend:
    driver: bridge
  core:
    driver: bridge
  backend:
    driver: bridge
  kafka:
    driver: bridge
  keycloak:
    driver: bridge