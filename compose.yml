# docker plugin install  grafana/loki-docker-driver:latest --alias loki --grant-all-permissions
# docker plugin enable loki

x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<date>\d{4}-\d{2}-\d{2}) (?P<time>\d{2}:\d{2}:\d{2}.\d{3}) (?P<message>(?s:.*))$$'

services:

  db:
    image: postgres:16
    networks:
      - backend
    environment:
      - POSTGRES_DB=core
      - POSTGRES_USER=core_user
      - POSTGRES_PASSWORD=core_pwd
    ports:
      - "5432:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - backend

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - backend

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - backend

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb
    networks:
      - backend

  # Infrastructure
  loki:
    image: grafana/loki:3.0.0
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  prometheus:
    image: prom/prometheus:v2.51.2
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    image: grafana/tempo:2.4.1
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
      - "4317:4317"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3200:3000"
    volumes:
      - ./etc/grafana/:/etc/grafana/provisioning/datasources
      - ./etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    logging: *default-logging

  api-cdt-gateway-service:
    image: agusramdan/api-cdt-gateway-service:dev
    build:
      context: .
    container_name: api-cdt-gateway-service
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - mongodb
    env_file:
      - ./gateway.env
    environment:
      - SERVER_PORT=8097
      - SPRING_PROFILES_ACTIVE=dev
    ports:
      - "8097:8097"
    networks:
      - backend

  api-cdt-core-service:
    build: .
    #image: agusramdan/api-cdt-core-service:dev
    container_name: api-cdt-core-service
    env_file:
      - ./core.env
    environment:
      #- SPRING_PROFILES_ACTIVE=devdocker,local
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    ports:
      - "8082:8080"
    depends_on:
      - db
    networks:
      - backend
      - core
      - frontend

#  api-cdt-cdm-service:
#    image: agusramdan/api-cdt-cdm-service:dev
#    build:
#      context: .
#    container_name: api-cdt-cdm-service
#    labels:
#      - "com.centurylinklabs.watchtower.enable=true"
#    depends_on:
#      - mongodb
#    env_file:
#      - ./gateway.env
#    environment:
#      #- SPRING_PROFILES_ACTIVE=oauth2,keycloak,dev
#      - JAVA_OPTS="-Xms128M -Xmx128M"
#    ports:
#      - "8091:8080"
#    networks:
#      - backend
#      - core
#      - frontend

networks:
  frontend:
    driver: bridge
  core:
    driver: bridge
  backend:
    driver: bridge
  kafka:
    driver: bridge
  keycloak:
    driver: bridge
