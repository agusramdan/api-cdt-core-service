version: '3.8'

services:
  # keycloak
  keycloak-db:
    image: postgres:13
    container_name: keycloak-db
    restart: always
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
      POSTGRES_DB: keycloak
#    ports:
#      - "5433:5432"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    restart: always
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME: localhost
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"

  # kong
  kong-database:
    image: postgres:13
    container_name: kong-database
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"

  kong-migrations:
    image: kong/kong-gateway:3.4.0
    container_name: kong-migrations
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap

  kong:
    image: kong/kong-gateway:3.4.0
    container_name: kong
    depends_on:
      - kong-database
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
    ports:
      - "8000:8000"  # Port untuk API Gateway (Proxy)
      - "8443:8443"  # Port HTTPS untuk Proxy
      - "8001:8001"  # Port untuk Admin API
      - "8444:8444"  # Port HTTPS untuk Admin API

  kong-dashboard:
    image: pantsel/konga
    container_name: kong-dashboard
    depends_on:
      - kong
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: kong
    ports:
      - "1337:1337" # Port UI Dashboard Konga

  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=core
      - POSTGRES_USER=core_user
      - POSTGRES_PASSWORD=core_pwd
    ports:
      - "5433:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    depends_on:
      - mongodb

  api-cdt-core-trx-service:
    image: 'agusramdan/api-cdt-core-service:uat'
    container_name: api-cdt-core-service
    environment:
      - SPRING_PROFILES_ACTIVE=devdocker,local
      - JAVA_OPTS="-Xms128M -Xmx128M"
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    ports:
      - "8082:8080"
    depends_on:
      - db

  api-cdt-gateway-service:
    image: 'agusramdan/api-cdt-gateway-service:dev'
    build:
      context: .
    container_name: api-cdt-gateway-service
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - mongodb
      - zipkin
      - logstash
    environment:
      #- SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://merahputih-id.tech:9000
      - SPRING_PROFILES_ACTIVE=zipkin,dev
      - JAVA_OPTS="-Xms128M -Xmx128M"
      - BAYARGW_MERCHANT_ID=MPS01
      - BAYARGW_TRANSACTION_KEY=M3r@h##Pu+1h
    ports:
      - "8097:8080"

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --schedule "0 * * * *" --label-enable